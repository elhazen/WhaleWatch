setwd("~/lib/git/WhaleWatch/Code")
source('load_Functions.R')
setwd('/Users/evan.howell/lib/git/WhaleWatch') #Change this when making live
path = getwd()
codedir = paste(path,'/Code',sep='')
modeldir = paste(path,'/ModelRuns',sep='')
datadir = paste(path, '/Data',sep='')
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
print("Bathymetry data present, moving to next command")
}else{
source(paste(codedir,'get_Bathymetry.R',sep=''))
}
focalsd <- function(ncvals,xmin,xmax,ymin,ymax,xres=7,yres=7){
r<-raster(ncvals,xmn=xmin,xmx=xmax,ymn=ymin,ymx=ymax)
rsd = focal(r, w=matrix(1,nrow=yres,ncol=xres), fun=sd,na.rm=TRUE)
rsd = flip(t(rsd),2)
extent(rsd)<-c(extent(rsd)@ymin,extent(rsd)@ymax,extent(rsd)@xmin,extent(rsd)@xmax)
return(rsd)
}
# Function to generalize grabbing data from ERDDAP.
#Download chl and change dataframe format for GMT to regrid chlorophyll to match SST
#Use [(last)] when obtaining real-time data from ERDDAP, e.g. [(2014-08-16T00:00:00Z):1:(2014-08-16T00:00:00Z)] = [(last)]
curldap <- function(dapurl, outfile) {
f = CFILE(outfile,mode='wb')
id = curlPerform(url=dapurl,writedata=f@ref)
close(f)
return(id)
}
if(exists('pkgTest')==FALSE) {
print('Function pkgTest not found, loading file Code/load_Functions.R...')
source('Code/load_Functions.R')
}
pkgTest('gmt')
pkgTest('SDMTools')
pkgTest('ncdf')
pkgTest('RCurl')
pkgTest('raster')
todaydate = format(Sys.time(), '%Y-%m-%d')
year = as.numeric(format(Sys.time(), '%Y'))
month = as.numeric(format(Sys.time(), '%m'))
# Create temporary directory to hold files while creating product. Folder is named tmp.[seconds since 1970]. You can convert to date with as.Date([seconds since 1970]/86400,origin='1970-01-01')
tmpdir = paste('tmp.',as.integer(Sys.time()),sep='')
dir.create(tmpdir, showWarnings = TRUE)
initialtime = 'last' #us
dapurl=paste('http://coastwatch.pfeg.noaa.gov/erddap/griddap/erdMWchlamday.nc?chlorophyll[(',initialtime,')][(0.0):1:(0.0)][(29):1:(49)][(224):1:(245)]',sep='')
chlfile = paste(tmpdir,'/chl.nc',sep='')
idchl = curldap(dapurl, chlfile)
if(idchl!=0) {
print(paste('Download failed, exit code =',id,'Trying secondary source'))
}
chlnc = open.ncdf(chlfile,write=FALSE)
chldate = as.Date(get.var.ncdf(chlnc,'time')/(60*60*24),origin='1970-01-01')
chlmonth = as.integer(format(chldate,'%m'))
chlyear = as.integer(format(chldate,'%Y'))
factorfile = sprintf('Data/WhaleWatchFactors_%d_%02d.csv',chlyear,chlmonth)
?sink
logfile = 'logs/templog'
dir.create(logfile, showWarnings = TRUE)
sink(logfile, type=c("output","message")) #set all
logfile <- file("logs/templog", open="wt")
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
Sys.time()
now<-Sys.time()
now
print(now)
list(now)
print(paste(now,"rrr"))
sink(type = c("output", message"))
sink(type = c("output", "message"))
now
close(logfile)
logfile <- file("logs/templog", open="wt")
?timestamp
warnings()
timestamp()
##------ Mon Jun  8 15:11:02 2015 ------##
logprint <- function(msg)
{
print(paste(timestamp(),msg,sep=''))
}
logprint('This is a test')
##------ Mon Jun  8 15:12:37 2015 ------##
logprint <- function(msg)
{
print(paste(Sys.time(),msg))
}
logprint('This is a test')
logprint <- function(msg)
{
print(paste(Sys.time(),msg, sep=': '))
}
logprint('This is a test')
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
logprint("Bathymetry data present, moving to next command")
}else{
logprint("Bathymetry data does not exist, creating bathymetry file")
source(paste(codedir,'get_Bathymetry.R',sep=''))
}
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
#set up initial log with helpful information
logprint('Starting operations to make WhaleWatch product')
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
logprint("Bathymetry data present, moving to next command")
}else{
logprint("Bathymetry data does not exist, creating bathymetry file")
source(paste(codedir,'get_Bathymetry.R',sep=''))
}
logprint("Running file get_EnvData.R")
if(exists('pkgTest')==FALSE) {
logprint('Function pkgTest not found, loading file Code/load_Functions.R...')
source('Code/load_Functions.R')
}
pkgTest('gmt')
pkgTest('SDMTools')
pkgTest('ncdf')
pkgTest('RCurl')
pkgTest('raster')
logprint('Loading required libraries')
pkgTest('gmt')
pkgTest('SDMTools')
pkgTest('ncdf')
pkgTest('RCurl')
pkgTest('raster')
logprint('Getting the current month and year...')
todaydate = format(Sys.time(), '%Y-%m-%d')
year = as.numeric(format(Sys.time(), '%Y'))
month = as.numeric(format(Sys.time(), '%m'))
tmpdir = paste('tmp.',as.integer(Sys.time()),sep='')
logprint(paste('Creating temp directory ',tmpdir))
dir.create(tmpdir, showWarnings = TRUE)
logprint(paste('Attempting to grab Chlorophyll data from time period',initialtime))
dapurl=paste('http://coastwatch.pfeg.noaa.gov/erddap/griddap/erdMWchlamday.nc?chlorophyll[(',initialtime,')][(0.0):1:(0.0)][(29):1:(49)][(224):1:(245)]',sep='')
chlfile = paste(tmpdir,'/chl.nc',sep='')
idchl = curldap(dapurl, chlfile)
if(idchl!=0) {
logprint(paste('Download failed, exit code =',id,'Trying secondary source'))
#Need to actually put secondary source here...
} else {
logprint('Chlorophyll data file download successful')
}
logprint(paste('Reading in chlorophyll data file',chlfile))
chlnc = open.ncdf(chlfile,write=FALSE)
chldate = as.Date(get.var.ncdf(chlnc,'time')/(60*60*24),origin='1970-01-01')
chlmonth = as.integer(format(chldate,'%m'))
chlyear = as.integer(format(chldate,'%Y'))
factorfile = sprintf('Data/WhaleWatchFactors_%d_%02d.csv',chlyear,chlmonth)
logprint(paste('Creating factor file',factorfile))
if (file.exists(factorfile)){
print('Yes')
}
if (file.exists(factorfile)){
logprint(paste("Factor file ", factorfile, " present, moving to modeling phase",sep=''))
stop()
}
source('Code/get_EnvData.R')
logprint(paste('Checking for existence of factor file',factorfile))
sink(type = c("output", message"))
sink(type = c("output", "message"))
source('Code/get_Bathymetry.R')
source(c('Code/get_Bathymetry.R','Code/get_EnvData.R'))
source('Code/get_Bathymetry.R')
source('Code/get_EnvData.R')
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
#set up initial log with helpful information
logprint('Starting operations to make WhaleWatch product')
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
logprint("Bathymetry data present, moving to next command")
}else{
logprint("Bathymetry data does not exist, creating bathymetry file")
source(paste(codedir,'get_Bathymetry.R',sep=''))
}
focalsd <- function(ncvals,xmin,xmax,ymin,ymax,xres=7,yres=7){
r<-raster(ncvals,xmn=xmin,xmx=xmax,ymn=ymin,ymx=ymax)
rsd = focal(r, w=matrix(1,nrow=yres,ncol=xres), fun=sd,na.rm=TRUE)
rsd = flip(t(rsd),2)
extent(rsd)<-c(extent(rsd)@ymin,extent(rsd)@ymax,extent(rsd)@xmin,extent(rsd)@xmax)
return(rsd)
}
# Function to generalize grabbing data from ERDDAP.
#Download chl and change dataframe format for GMT to regrid chlorophyll to match SST
#Use [(last)] when obtaining real-time data from ERDDAP, e.g. [(2014-08-16T00:00:00Z):1:(2014-08-16T00:00:00Z)] = [(last)]
curldap <- function(dapurl, outfile) {
f = CFILE(outfile,mode='wb')
id = curlPerform(url=dapurl,writedata=f@ref)
close(f)
return(id)
}
#Load required libraries. Function pkgTest is in the file Code/load_Functions.R and should have been loaded. If not test here and load file.
if(exists('pkgTest')==FALSE) {
logprint('Function pkgTest not found, loading file Code/load_Functions.R...')
source('Code/load_Functions.R')
}
logprint('Loading required libraries')
pkgTest('gmt')
pkgTest('SDMTools')
pkgTest('ncdf')
pkgTest('RCurl')
pkgTest('raster')
logprint('Getting the current month and year...')
todaydate = format(Sys.time(), '%Y-%m-%d')
year = as.numeric(format(Sys.time(), '%Y'))
month = as.numeric(format(Sys.time(), '%m'))
# Create temporary directory to hold files while creating product. Folder is named tmp.[seconds since 1970]. You can convert to date with as.Date([seconds since 1970]/86400,origin='1970-01-01')
tmpdir = paste('tmp.',as.integer(Sys.time()),sep='')
logprint(paste('Creating temp directory',tmpdir))
dir.create(tmpdir, showWarnings = TRUE)
#http://coastwatch.pfeg.noaa.gov/erddap/convert/time.txt?n=473472000&units=seconds%20since%201970-01-01T00:00:00Z
#Get Environmental variables.
# First is to grab Chlorophyll data as this is the limiting factor. First step is to try from ERDDAP. If this fails can grab from other sources.
initialtime = 'last' #use this to get the last available ERDDAP file
#For debugging you can enter in a specific ERDDAP time in the format 2015-04-16T00:00:00Z
#initialtime = '2009-04-16T00:00:00Z' #use this to get the last available ERDDAP file
logprint(paste('Attempting to grab Chlorophyll data from time period',initialtime))
dapurl=paste('http://coastwatch.pfeg.noaa.gov/erddap/griddap/erdMWchlamday.nc?chlorophyll[(',initialtime,')][(0.0):1:(0.0)][(29):1:(49)][(224):1:(245)]',sep='')
chlfile = paste(tmpdir,'/chl.nc',sep='')
idchl = curldap(dapurl, chlfile)
#Check id to make sure it exits cleanly (e.g., id=0)
if(idchl!=0) {
logprint(paste('Download failed, exit code =',id,'Trying secondary source'))
#Need to actually put secondary source here...
} else {
logprint('Chlorophyll data file download successful!!!')
}
#Read in chl.nc file to get month and year to load other data files
logprint(paste('Reading in chlorophyll data file',chlfile))
chlnc = open.ncdf(chlfile,write=FALSE)
chldate = as.Date(get.var.ncdf(chlnc,'time')/(60*60*24),origin='1970-01-01')
chlmonth = as.integer(format(chldate,'%m'))
chlyear = as.integer(format(chldate,'%Y'))
factorfile = sprintf('Data/WhaleWatchFactors_%d_%02d.csv',chlyear,chlmonth)
# Do first sanity check - Make sure we actually need the file before moving on
logprint(paste('Checking for existence of factor file',factorfile))
if (file.exists(factorfile)){
logprint(paste("Factor file ", factorfile, " present, moving to modeling phase",sep=''))
return()
}
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
#set up initial log with helpful information
logprint('Starting operations to make WhaleWatch product')
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
logprint("Bathymetry data present, moving to next command")
}else{
logprint("Bathymetry data does not exist, creating bathymetry file")
source(paste(codedir,'get_Bathymetry.R',sep=''))
}
get_EnvData()
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
#set up initial log with helpful information
logprint('Starting operations to make WhaleWatch product')
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
logprint("Bathymetry data present, moving to next command")
}else{
logprint("Bathymetry data does not exist, creating bathymetry file")
source(paste(codedir,'get_Bathymetry.R',sep=''))
}
logprint("Running file get_EnvData.R")
source(paste(codedir,'get_EnvData.R',sep=''),print.eval=TRUE)
getwd()
close(logfile)
getwd()
setwd('/Users/evan.howell/lib/git/WhaleWatch') #Change this when making live
path = getwd()
codedir = paste(path,'/Code',sep='')
modeldir = paste(path,'/ModelRuns',sep='')
datadir = paste(path, '/Data',sep='')
#Load global functions used in process
source("Code/load_Functions.R")
#Set up logfile
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
#set up initial log with helpful information
logprint('Starting operations to make WhaleWatch product')
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
logprint("Bathymetry data present, moving to next command")
}else{
logprint("Bathymetry data does not exist, creating bathymetry file")
source(paste(codedir,'get_Bathymetry.R',sep=''))
}
logprint("Running file get_EnvData.R")
source(paste(codedir,'get_EnvData.R',sep=''),print.eval=TRUE)
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
#set up initial log with helpful information
logprint('Starting operations to make WhaleWatch product')
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
logprint("Bathymetry data present, moving to next command")
}else{
logprint("Bathymetry data does not exist, creating bathymetry file")
get_Bathymetry()
}
logprint("Running function get_EnvData.R")
get_EnvData()
logfile <- file("logs/templog", open="wt")
sink(logfile, type=c("output","message")) #set all output to templog
#set up initial log with helpful information
logprint('Starting operations to make WhaleWatch product')
if (file.exists(paste(datadir,'/bathy.txt',sep=''))){
logprint("Bathymetry data present, moving to next command")
}else{
logprint("Bathymetry data does not exist, creating bathymetry file")
get_Bathymetry()
}
logprint("Running function get_EnvData.R")
get_EnvData()
sink(logfile, type=c("output","message"))
initialtime = 'last' #use this to get the last available ERDDAP file
#For debugging you can enter in a specific ERDDAP time in the format 2015-04-16T00:00:00Z
#initialtime = '2009-04-16T00:00:00Z' #use this to get the last available ERDDAP file
logprint(paste('Attempting to grab Chlorophyll data from time period',initialtime))
dapurl=paste('http://coastwatch.pfeg.noaa.gov/erddap/griddap/erdMWchlamday.nc?chlorophyll[(',initialtime,')][(0.0):1:(0.0)][(29):1:(49)][(224):1:(245)]',sep='')
chlfile = paste(tmpdir,'/chl.nc',sep='')
idchl = curldap(dapurl, chlfile)
#Check id to make sure it exits cleanly (e.g., id=0)
if(idchl!=0) {
logprint(paste('Download failed, exit code =',id,'Trying secondary source'))
#Need to actually put secondary source here...
} else {
logprint('Chlorophyll data file download successful!!!')
}
#Read in chl.nc file to get month and year to load other data files
logprint(paste('Reading in chlorophyll data file',chlfile))
chlnc = open.ncdf(chlfile,write=FALSE)
chldate = as.Date(get.var.ncdf(chlnc,'time')/(60*60*24),origin='1970-01-01')
chlmonth = as.integer(format(chldate,'%m'))
chlyear = as.integer(format(chldate,'%Y'))
factorfile = sprintf('Data/WhaleWatchFactors_%d_%02d.csv',chlyear,chlmonth)
# Do first sanity check - Make sure we actually need the file before moving on
logprint(paste('Checking for existence of factor file',factorfile))
if (file.exists(factorfile)){
logprint(paste("Factor file ", factorfile, " present, moving to modeling phase",sep=''))
logprint(paste("Cleaning up temp directory", tmpdir))
unlink(tmpdir,recursive=TRUE)
return(factorfile)
}
chllon=get.var.ncdf(chlnc,'longitude')
chllat=get.var.ncdf(chlnc,'latitude')
erdtime = format(chldate,'%Y-%m-%dT00:00:00Z')
sstfile = paste(tmpdir,'/sst.nc',sep='')
dapurl = paste('http://coastwatch.pfeg.noaa.gov/erddap/griddap/erdMWsstdmday.nc?sst[(',erdtime,'):1:(',erdtime,')][(0.0):1:(0.0)][(29):1:(49)][(224):1:(245)]',sep='')
idsst = curldap(dapurl, sstfile)
#Check id to make sure it exits cleanly (e.g., id=0)
if(idsst!=0) {
print(paste('Download failed, exit code =',id,'Trying secondary source'))
}
sstnc = open.ncdf(sstfile,write=FALSE)
sstdate = as.Date(get.var.ncdf(sstnc,'time')/(60*60*24),origin='1970-01-01')
sstlon=get.var.ncdf(sstnc,'longitude')
sstlat=get.var.ncdf(sstnc,'latitude')
#Do some sanity checks on dates and locations
if(sstdate-chldate!=0) { print('Problem: Dates not identical')}
if(sum(sstlon-chllon)!=0) { print('Problem: Longitudes not identical')}
if(sum(sstlat-chllat)!=0) { print('Problem: Latitudes not identical')}
#Everything OK, close Chla and SST NetCDF files
close.ncdf(sstnc)
close.ncdf(chlnc)
gmt.system(paste('grdfilter ',chlfile,'?chlorophyll -D0 -Fm0.5 -R225/245/30N/49N -I0.25/0.25 -G',tmpdir,'/chlgridded_grdfilter.grd',sep=''))
gmt.system(paste('grdfilter ',sstfile,'?sst -D0 -Fm0.5 -R225/245/30N/49N -I0.25/0.25 -G',tmpdir,'/sstgridded_grdfilter.grd',sep='')) #using a median filter.
#Export as ascii to load into R
gmt.system(paste('grd2xyz ',tmpdir,'/chlgridded_grdfilter.grd',sep=''),file=paste(tmpdir,'/chl.xyz',sep=''),append=F)
gmt.system(paste('grd2xyz ',tmpdir,'/sstgridded_grdfilter.grd',sep=''),file=paste(tmpdir,'/sst.xyz',sep=''),append=F)
if (as.Date(Sys.time())-as.Date(erdtime) > 45) {
print('data date is more than 45 days older than today, using delayed time product')
sshtype = 'dt'
} else {
print('Using near-real-time time product')
sshtype = 'nrt-over30d'
}
erdtime
sink(logfile, type=c("output","message")) #set all output to templog
erdtime
sink(type = c("output", "message"))
erdtime
1+1
1+1
print('1')
sink()
print('1')
outfile = paste(tmpdir,'/sshd.nc',sep='')
dapurl = paste('http://aviso-users:grid2010@opendap.aviso.altimetry.fr/thredds/dodsC/dataset-duacs-',sshtype,'-global-allsat-msla-h',sep='')
sshnc = open.ncdf(dapurl,write=FALSE)
sshdates = as.Date(get.var.ncdf(sshnc,'time'),origin='1950-01-01')
LonStartIdx <- which( sshnc$dim$lon$vals-0.125 == 225)
LatStartIdx <- which( sshnc$dim$lat$vals-0.125 == 30)
TimeStartIdx <- which(sshdates==as.character(sstdate-16)) #16 days before SST and Chla
a = sshdates[last]
a = sshdates[-3]
a = sshdates[8030]
a = [1,2,3,4]
a = c(1,2,2,2)
a
b=a[-1]
b=a[:-1]
b = tail(a,1)
a = c(1,2,2,5)
b = tail(a,1)
b = tail(sshdates,1)
close.ncdf(sshnc)
dapurl = paste('http://aviso-users:grid2010@opendap.aviso.altimetry.fr/thredds/dodsC/dataset-duacs-',sshtype,'-global-twosat-msla-h',sep='')
#Load SSH OpenDAP file from AVISO
sshnc = open.ncdf(dapurl,write=FALSE)
#Get all dates in NetCDF file
sshdates = as.Date(get.var.ncdf(sshnc,'time'),origin='1950-01-01')
b = tail(sshdates,1)
close.ncdf(sshnc)
dapurl = 'http://aviso-users:grid2010@opendap.aviso.altimetry.fr/thredds/dodsC/dataset-duacs-nrt-over30d-global-allsat-msla-h'
#Load SSH OpenDAP file from AVISO
sshnc = open.ncdf(dapurl,write=FALSE)
#Get all dates in NetCDF file
sshdates = as.Date(get.var.ncdf(sshnc,'time'),origin='1950-01-01')
#Find initial indices to pull data chunk. Pixels are centered and SST and Chl are not so subtracting 0.125 to get left edge of pixel. May want to look at this but shouldn't affect model.
LonStartIdx <- which( sshnc$dim$lon$vals-0.125 == 225)
LatStartIdx <- which( sshnc$dim$lat$vals-0.125 == 30)
TimeStartIdx <- which(sshdates==as.character(sstdate-16)) #16 days before SST and Chla
SLAIdx <- which(names(sshnc$var)=='sla') # find variable index for SLA
b = sshdates[1:5]
b = length(sshdates)
b = sshdates[397]
b = sshdates[4]
TimeStartIdx <- which(sshdates==as.character(sstdate-16))
b = sshdates[358]
b = which(sshdates==as.character(sstdate-1600))
is.empty(b)
b = length(TimeStartIdx)
if (length(TimeStartIdx) == 0) {
b=2
}
b
